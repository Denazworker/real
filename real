getgenv().gethui = function()
    local success, hui = pcall(function()
        return game:GetService("CoreGui")["RobloxGui"]
    end)
    if success then
        return hui
    else
        warn("Failed to get RobloxGui")
        return nil
    end
end

getgenv().WebSocket = {}
getgenv().WebSocket.connect = function(url)
	local onmsg = Instance.new("BindableEvent")
	local oncls = Instance.new("BindableEvent")
	local conn = true
	return {
		Send = function(self, message)
			if conn then
				onmsg:Fire("Received message: " .. message)
			else
				error("WebSocket is closed")
			end
		end,
		Close = function(self)
			if conn then
				conn = false
				oncls:Fire()
			else
				error("WebSocket is already closed")
			end
		end,
		OnMessage = onmsg.Event,
		OnClose = oncls.Event
	}
end
getgenv()["getsenv"] = newcclosure(function(script)
    assert(typeof(script) == "Instance", "invalid argument #1 to 'getsenv' [ModuleScript or LocalScript expected]", 2);
	assert((script:IsA("LocalScript") or script:IsA("ModuleScript")), "invalid argument #1 to 'getsenv' [ModuleScript or LocalScript expected]", 2)
	if (script:IsA("LocalScript") == true) then 
		for _, v in getreg() do
			if (type(v) == "function") then
				if getfenv(v)["script"] then
					if getfenv(v)["script"] == script then
						return getfenv(v)
					end
				end
			end
		end
	else
		local Reg = getreg()
		local Senv = {}

		if #Reg == 0 then
			return require(script)
		end

		for _, v in next, Reg do
			if type(v) == "function" and islclosure(v) then
				local Fenv = getfenv(v)
				local Raw = rawget(Fenv, "script")
				if Raw and Raw == script then
					for i, k in next, Fenv do
						if i ~= "script" then
							rawset(Senv, i, k)
						end
					end
				end
			end
		end
		return Senv
	end
end)
getgenv()["getsenv"] = getsenv
local WebSocket = getgenv().WebSocket
WebSocket.connect = getgenv().WebSocket.connect
gethui = getgenv().gethui
